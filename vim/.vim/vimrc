" USEFULL DOC FOR SCRIPTING
" useful lkn for vimscripting https://devhints.io/vimscript
" fzf vim function docs https://github.com/junegunn/fzf/blob/master/README-VIM.md

"vim plug plugins
call plug#begin()
" ale plugin
Plug 'junegunn/fzf'
Plug 'dense-analysis/ale'
call plug#end()

" path to .vim folder
let g:path = fnamemodify(resolve(expand('<sfile>:p')), ':h')

" load file function for safeguard
function! LoadFile(filename)
  if  filereadable(g:path . '/' . a:filename)
    execute 'source' . expand(g:path) . '/' . expand(a:filename)
  endif
endfunction

" set colorscheme
colorscheme slate

" set relative line numbers
set relativenumber

" enable syntax highlighting
syntax on

" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" set space as tab characters and tab dimension to 2
set tabstop=2
set shiftwidth=2
set expandtab

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Show partial command you type in the last line of the screen.
set showcmd

" Show the mode you are on the last line.
set showmode

" KEYMAPS
" vim maps miniguide
" for knowledge :help :map
" [niv][nore]map charsequence charsequence

" set space as the leader key
nnoremap <SPACE> <Nop>
let mapleader=" "

" close buffer
nnoremap <Leader>c :bw<CR>
nnoremap <Leader>C :bw!<CR>

" save buffer
nnoremap <Leader>w :w<CR>
nnoremap <Leader>W :wa<CR>

" quit vim
nnoremap <Leader>q :qa<CR>
nnoremap <Leader>Q :qa!<CR>

" open vim configuration
nnoremap <Leader>Vc :tabe $MYVIMRC<CR>

" reload vim configuration
nnoremap <Leader>Vr :source $MYVIMRC<CR>


" yazi shortcut
if  ! empty(glob('/usr/bin/yazi'))
  noremap <Leader>e :!yazi<CR>
else
  noremap <Leader>e :tabedit .<CR>
endif


" keep cursor on center when scrolling files
nnoremap n nzz
nnoremap N Nzz
nnoremap { {zz
nnoremap } }zz
nnoremap ( (zz
nnoremap ) )zz
nnoremap [ [zz
nnoremap ] ]zz

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" wrap word into symbols
nmap <Leader>m` i`<Esc>ea`<Esc>
nmap <Leader>m' i'<Esc>ea'<Esc>
nmap <Leader>m" i"<Esc>ea"<Esc>
nmap <Leader>m[ i[<Esc>ea]<Esc>
nmap <Leader>m{ i{<Esc>ea}<Esc>
nmap <Leader>m( i(<Esc>ea)<Esc>
nmap <Leader>m< i<<Esc>ea><Esc>

" copy to clipboard (wayland only)
if ! empty(glob('/usr/bin/wl-copy'))
  vnoremap <silent>Y :w !wl-copy<CR><CR>
  nnoremap <silent>Y :call system("wl-copy", @")<CR>
endif

" tab command shortcut
nnoremap <Leader>te :tabedit<Space>
nnoremap <Leader>to :tabonly<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <TAB> gt
nnoremap <S-TAB> gT
nnoremap <Leader>tn gt
nnoremap <Leader>tp gT
nnoremap <Leader>tj :tabmove +1<CR>
nnoremap <Leader>tj :tabmove +1<CR>
nnoremap <Leader>tp :tabprevious<CR>

nnoremap <Leader>s :s/
nnoremap <Leader>S :%s/

" add elements to begining and endig of a visual highlighted block
vnoremap ` <ESC>`>a`<ESC>`<i`<ESC>
vnoremap ' <ESC>`>a'<ESC>`<i'<ESC>
vnoremap " <ESC>`>a"<ESC>`<i"<ESC>
vnoremap ( <ESC>`>a)<ESC>`<i(<ESC>
vnoremap [ <ESC>`>a]<ESC>`<i[<ESC>
vnoremap { <ESC>`>a}<ESC>`<i{<ESC>
vnoremap {{ <ESC>`>a}}<ESC>`<i{{<ESC>
vnoremap m <ESC>`>a$<ESC>`<i$<ESC>
vnoremap mm <ESC>`>a$$<ESC>`<i$$<ESC>
vnoremap <C-i> <ESC>`>a*<ESC>`<i*<ESC>
vnoremap <C-b> <ESC>`>a**<ESC>`<i**<ESC>

" install programs script utility
nnoremap <Leader>Pi :! store.sh install<CR>
nnoremap <Leader>Pr :! store.sh remove<CR>

" indent all file
nnoremap <Leader>i ggVG=
" open todo.md file
nnoremap <Leader>td :tabedit todo.md<CR>

" load ale configurations
call LoadFile("ale_configs.vim")
" load git shortcuts
call LoadFile("git.vim")
" load fzf configurations
call LoadFile("fzf_configs.vim")
" load tabline configuration
call LoadFile("tabline.vim")
