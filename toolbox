#!/bin/bash
source /etc/os-release
VIMRC="$HOME/.vimrc"
VIM_FOLDER="$HOME/.vim"
BACKUP_SUFFIX="ct.old"

# folder where to link vim plugins installed from debian package
VIM_LINK_FOLDER="/usr/share/vim/vimfiles"

# language servers to install
LANG_SERVERS="shellcheck gopls"

# dependencies that can be removed after uninstall
OPT_DEPS="tmux fzf ripgrep vim-ale"

# vital dependencies
DEPS="stow gawk vim git $OPT_DEPS"

# ROOT FUNCTIONS
install_deps(){
  [[ "$(whoami)" != "root" ]] && echo "run $0 as root" && exit 1
  case $ID in
    "arch")
      pacman -S $DEPS --noconfirm
      ;;
    "debian"|"ubuntu")
      apt install $DEPS -y
      # installing fzf vim integration
      mkdir -p "$VIM_LINK_FOLDER/plugin/" && ln -fs "/usr/share/doc/fzf/examples/plugin/fzf.vim" "$VIM_LINK_FOLDER/plugin/"
      ;;
  esac
}

install_language_servers(){
  [[ "$(whoami)" != "root" ]] && echo "run $0 as root" && exit 1
  case $ID in
    "arch")
      pacman -S $LANG_SERVERS --noconfirm
      ;;
    "debian"|"ubuntu")
      apt install $LANG_SERVERS -y
      ;;
  esac
}

uninstall_deps_language_servers(){
  [[ "$(whoami)" != "root" ]] && echo "run $0 as root" && exit 1
  case $ID in
    "arch")
      pacman -Rns $OPT_DEPS $LANG_SERVERS --noconfirm
      ;;
    "debian"|"ubuntu")
      rm -r "$VIM_LINK_FOLDER/plugin/fzf.vim"
      apt remove $OPT_DEPS $LANG_SERVERS -y
      ;;
  esac
}

# USER FUNCTIONS
function install_toolbox(){
  # create directories for stow, if they don't exist
  mkdir -p "$HOME/.config"
  mkdir -p "$HOME/.local/bin"
  mkdir -p "$VIM_FOLDER"
  # stow binaries and configurations
  stow --target="$HOME" etc
  stow --target="$HOME" bin
  # backup .vimrc than if stow fails backup .vim folder and try again
  if [[ -f "$VIMRC" ]]; then
    echo "backup vimrc file"
    mv "$VIMRC" "$VIMRC.$BACKUP_SUFFIX"
  fi
  if ! stow --target="$HOME" vim; then
    if [[ -d "$VIM_FOLDER" ]]; then
      echo "backup .vim directory"
      mv "$VIM_FOLDER" "$VIM_FOLDER.$BACKUP_SUFFIX"
    fi
    stow --target="$HOME" vim
  fi

  # editing PATH variable and sourcing shell integration
  if [[ "$(grep 'source $HOME/.config/toolbox/bash_integration.sh' "$HOME/.bashrc" )" == "" ]]; then
    echo "adding toolbox bash integration"
    echo 'source $HOME/.config/toolbox/bash_integration.sh' >> "$HOME/.bashrc"
  fi
}

function uninstall_toolbox(){
  echo "removing config with stow"
  stow --target="$HOME" -D vim
  stow --target="$HOME" -D etc
  if [[ -f "$VIMRC.$BACKUP_SUFFIX" ]]; then
    echo "restoring old vimrc"
    mv "$VIMRC.$BACKUP_SUFFIX" "$VIMRC"
  fi
  if [[ -d "$VIM_FOLDER.$BACKUP_SUFFIX" ]]; then
    echo "restoring old .vim";
    mv "$VIM_FOLDER.$BACKUP_SUFFIX" "$VIM_FOLDER";
  fi
  echo "removing lines from bashrc"
  sed '/source \$HOME\/\.config\/toolbox\/bash_integration.sh/d' -i "$HOME/.bashrc"
}


COMMAND="$1"
case "$COMMAND" in
  "install_toolbox")
    install_toolbox
    ;;
  "uninstall_toolbox")
    uninstall_toolbox
    ;;
  "install_language_servers")
    install_language_servers
    ;;
  "install_deps")
    install_deps
    ;;
  "uninstall_deps_language_servers")
    uninstall_deps_language_servers
    ;;
  "help"|"--help")
    echo "usage $0 [install_toolbox|uninstall_toolbox|install_language_servers|install_deps|uninstall_deps_language_servers]"
    echo "to install from scratch run:"
    echo "$0 install_deps"
    echo "$0 install_toolbox"
    ;;
  'uninstall')
    # if not running as root call deps nstallation with sudo
    if [[ "$(whoami)" != "root" ]]; then
      echo "installing deps and toolbox"
      sudo "$0" uninstall_deps_language_servers && uninstall_toolbox
    else
      "$0" uninstall_deps_language_servers && uninstall_toolbox
    fi
    ;;
  *)
    # if not running as root call deps installation with sudo
    if [[ "$(whoami)" != "root" ]]; then
      echo "installing deps and toolbox"
      sudo "$0" install_deps && install_toolbox
    else
      "$0" install_deps && install_toolbox
    fi
    ;;
esac
